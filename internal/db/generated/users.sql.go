// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username, full_name, password, role_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, username, full_name, password, verified, verified_at, created_at, updated_at, role_id
`

type CreateUserParams struct {
	Email    string      `json:"email"`
	Username string      `json:"username"`
	FullName string      `json:"full_name"`
	Password string      `json:"password"`
	RoleID   pgtype.Int4 `json:"role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.FullName,
		arg.Password,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.FullName,
		&i.Password,
		&i.Verified,
		&i.VerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getByEmail = `-- name: GetByEmail :one
SELECT id, email, username, full_name, password, verified, verified_at, created_at, updated_at, role_id FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.FullName,
		&i.Password,
		&i.Verified,
		&i.VerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, username, full_name, password, verified, verified_at, created_at, updated_at, role_id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.FullName,
		&i.Password,
		&i.Verified,
		&i.VerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
	)
	return i, err
}

const getUserWithRole = `-- name: GetUserWithRole :one
SELECT 
    users.id,
    users.email,
    users.username,
    users.full_name,
    users.password,
    users.verified,
    users.verified_at,
    users.created_at,
    users.updated_at,
    users.role_id,
    roles.role, roles.role, roles.role, roles.role, roles.role, roles.role AS role
FROM users
JOIN roles ON users.role_id = roles.id
WHERE users.id = $1
`

type GetUserWithRoleRow struct {
	ID         int64              `json:"id"`
	Email      string             `json:"email"`
	Username   string             `json:"username"`
	FullName   string             `json:"full_name"`
	Password   string             `json:"password"`
	Verified   bool               `json:"verified"`
	VerifiedAt pgtype.Timestamptz `json:"verified_at"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	RoleID     pgtype.Int4        `json:"role_id"`
	Role       int64              `json:"role"`
	Role_2     string             `json:"role_2"`
	Role_3     int32              `json:"role_3"`
	Role_4     pgtype.Text        `json:"role_4"`
	Role_5     pgtype.Timestamptz `json:"role_5"`
	Role_6     pgtype.Timestamptz `json:"role_6"`
}

func (q *Queries) GetUserWithRole(ctx context.Context, id int64) (GetUserWithRoleRow, error) {
	row := q.db.QueryRow(ctx, getUserWithRole, id)
	var i GetUserWithRoleRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.FullName,
		&i.Password,
		&i.Verified,
		&i.VerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
		&i.Role,
		&i.Role_2,
		&i.Role_3,
		&i.Role_4,
		&i.Role_5,
		&i.Role_6,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT users.id, email, username, full_name, password, verified, verified_at, users.created_at, users.updated_at, role_id, roles.id, name, level, description, roles.created_at, roles.updated_at FROM users
JOIN roles ON users.role_id = roles.id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUsersRow struct {
	ID          int64              `json:"id"`
	Email       string             `json:"email"`
	Username    string             `json:"username"`
	FullName    string             `json:"full_name"`
	Password    string             `json:"password"`
	Verified    bool               `json:"verified"`
	VerifiedAt  pgtype.Timestamptz `json:"verified_at"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	RoleID      pgtype.Int4        `json:"role_id"`
	ID_2        int64              `json:"id_2"`
	Name        string             `json:"name"`
	Level       int32              `json:"level"`
	Description pgtype.Text        `json:"description"`
	CreatedAt_2 pgtype.Timestamptz `json:"created_at_2"`
	UpdatedAt_2 pgtype.Timestamptz `json:"updated_at_2"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.FullName,
			&i.Password,
			&i.Verified,
			&i.VerifiedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RoleID,
			&i.ID_2,
			&i.Name,
			&i.Level,
			&i.Description,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set email = $2, 
  username = $3, 
  full_name = $4,
  updated_at = NOW()
WHERE id = $1 RETURNING id, email, username, full_name, password, verified, verified_at, created_at, updated_at, role_id
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
	FullName string `json:"full_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.FullName,
	)
	return err
}
